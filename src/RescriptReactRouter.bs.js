// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_array from "rescript/lib/es6/Js_array.js";
import * as Js_string from "rescript/lib/es6/Js_string.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

function safeMakeEvent(eventName) {
  if (typeof Event === "function") {
    return new Event(eventName);
  }
  let event = document.createEvent("Event");
  event.initEvent(eventName, true, true);
  return event;
}

function pathParse(str) {
  switch (str) {
    case "" :
    case "/" :
      return /* [] */0;
    default:
      let raw = Js_string.sliceToEnd(1, str);
      let match = raw[raw.length - 1 | 0];
      let raw$1 = match === "/" ? Js_string.slice(0, -1, raw) : raw;
      let match$1 = Js_string.splitAtMost("?", 2, raw$1);
      let raw$2 = match$1.length !== 2 ? raw$1 : match$1[0];
      let a = Js_array.filter(item => item.length !== 0, Js_string.split("/", raw$2));
      let _i = a.length - 1 | 0;
      let _res = /* [] */0;
      while (true) {
        let res = _res;
        let i = _i;
        if (i < 0) {
          return res;
        }
        _res = {
          hd: a[i],
          tl: res
        };
        _i = i - 1 | 0;
        continue;
      };
  }
}

function path(serverUrlString, param) {
  let match = globalThis.window;
  if (serverUrlString !== undefined) {
    return pathParse(serverUrlString);
  } else if (match !== undefined) {
    return pathParse(Primitive_option.valFromOption(match).location.pathname);
  } else {
    return /* [] */0;
  }
}

function hash() {
  let window = globalThis.window;
  if (window === undefined) {
    return "";
  }
  let raw = Primitive_option.valFromOption(window).location.hash;
  switch (raw) {
    case "" :
    case "#" :
      return "";
    default:
      return Js_string.sliceToEnd(1, raw);
  }
}

function searchParse(str) {
  switch (str) {
    case "" :
    case "?" :
      return "";
    default:
      let match = Js_string.splitAtMost("?", 2, str);
      if (match.length !== 2) {
        return "";
      } else {
        return match[1];
      }
  }
}

function search(serverUrlString, param) {
  let match = globalThis.window;
  if (serverUrlString !== undefined) {
    return searchParse(serverUrlString);
  } else if (match !== undefined) {
    return searchParse(Primitive_option.valFromOption(match).location.search);
  } else {
    return "";
  }
}

function push(path) {
  let match = globalThis.history;
  let match$1 = globalThis.window;
  if (match !== undefined && match$1 !== undefined) {
    Primitive_option.valFromOption(match).pushState(null, "", path);
    Primitive_option.valFromOption(match$1).dispatchEvent(safeMakeEvent("popstate"));
    return;
  }
  
}

function replace(path) {
  let match = globalThis.history;
  let match$1 = globalThis.window;
  if (match !== undefined && match$1 !== undefined) {
    Primitive_option.valFromOption(match).replaceState(null, "", path);
    Primitive_option.valFromOption(match$1).dispatchEvent(safeMakeEvent("popstate"));
    return;
  }
  
}

function urlNotEqual(a, b) {
  if (a.hash !== b.hash || a.search !== b.search) {
    return true;
  } else {
    let _aList = a.path;
    let _bList = b.path;
    while (true) {
      let bList = _bList;
      let aList = _aList;
      if (!aList) {
        return bList;
      }
      if (!bList) {
        return true;
      }
      if (aList.hd !== bList.hd) {
        return true;
      }
      _bList = bList.tl;
      _aList = aList.tl;
      continue;
    };
  }
}

function url(serverUrlString, param) {
  return {
    path: path(serverUrlString, undefined),
    hash: hash(),
    search: search(serverUrlString, undefined)
  };
}

function watchUrl(callback) {
  let window = globalThis.window;
  if (window === undefined) {
    return () => {};
  }
  let watcherID = () => callback(url(undefined, undefined));
  Primitive_option.valFromOption(window).addEventListener("popstate", watcherID);
  return watcherID;
}

function unwatchUrl(watcherID) {
  let window = globalThis.window;
  if (window !== undefined) {
    Primitive_option.valFromOption(window).removeEventListener("popstate", watcherID);
    return;
  }
  
}

function useUrl(serverUrl, param) {
  let match = React.useState(() => {
    if (serverUrl !== undefined) {
      return serverUrl;
    } else {
      return url(undefined, undefined);
    }
  });
  let setUrl = match[1];
  let url$1 = match[0];
  React.useEffect(() => {
    let watcherId = watchUrl(url => setUrl(param => url));
    let newUrl = url(undefined, undefined);
    if (urlNotEqual(newUrl, url$1)) {
      setUrl(param => newUrl);
    }
    return () => unwatchUrl(watcherId);
  }, []);
  return url$1;
}

let dangerouslyGetInitialUrl = url;

export {
  push,
  replace,
  watchUrl,
  unwatchUrl,
  dangerouslyGetInitialUrl,
  useUrl,
}
/* react Not a pure module */
