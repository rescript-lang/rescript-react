// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var TestUtils = require("react-dom/test-utils");

function act(func) {
  var reactFunc = function () {
    Curry._1(func, undefined);
  };
  TestUtils.act(reactFunc);
}

function actAsync(func) {
  return TestUtils.act(function () {
              return Curry._1(func, undefined);
            });
}

function changeWithValue(element, value) {
  var $$event = {
    target: {
      value: value
    }
  };
  TestUtils.Simulate.change(element, $$event);
}

function changeWithChecked(element, value) {
  var $$event = {
    target: {
      checked: value
    }
  };
  TestUtils.Simulate.change(element, $$event);
}

var Simulate = {
  changeWithValue: changeWithValue,
  changeWithChecked: changeWithChecked
};

function findBySelector(element, selector) {
  return element.querySelector(selector);
}

function findByAllSelector(element, selector) {
  return Array.from(element.querySelectorAll(selector));
}

function findBySelectorAndTextContent(element, selector, content) {
  return Caml_option.undefined_to_opt(Array.from(element.querySelectorAll(selector)).find(function (node) {
                  return node.textContent === content;
                }));
}

function findBySelectorAndPartialTextContent(element, selector, content) {
  return Caml_option.undefined_to_opt(Array.from(element.querySelectorAll(selector)).find(function (node) {
                  return node.textContent.includes(content);
                }));
}

var DOM = {
  findBySelector: findBySelector,
  findByAllSelector: findByAllSelector,
  findBySelectorAndTextContent: findBySelectorAndTextContent,
  findBySelectorAndPartialTextContent: findBySelectorAndPartialTextContent
};

function prepareContainer(container, param) {
  var containerElement = document.createElement("div");
  var body = document.body;
  if (body !== undefined) {
    Caml_option.valFromOption(body).appendChild(containerElement);
  }
  container.contents = Caml_option.some(containerElement);
}

function cleanupContainer(container, param) {
  var contents = container.contents;
  if (contents !== undefined) {
    Caml_option.valFromOption(contents).remove();
  }
  container.contents = undefined;
}

function getContainer(container) {
  var contents = container.contents;
  if (contents !== undefined) {
    return Caml_option.valFromOption(contents);
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

exports.act = act;
exports.actAsync = actAsync;
exports.Simulate = Simulate;
exports.DOM = DOM;
exports.prepareContainer = prepareContainer;
exports.cleanupContainer = cleanupContainer;
exports.getContainer = getContainer;
/* react-dom/test-utils Not a pure module */
